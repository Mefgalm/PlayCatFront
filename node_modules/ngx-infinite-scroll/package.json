{
  "_from": "ngx-infinite-scroll",
  "_id": "ngx-infinite-scroll@6.0.1",
  "_inBundle": false,
  "_integrity": "sha512-20WcD+3Qh3O0IEFyIjt55JPTKw5W1hAxERXMUDgGDRveS3IBpBxv2DuX5vuHG/bNGC+WoTDlNR/XXScNNicRpw==",
  "_location": "/ngx-infinite-scroll",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "ngx-infinite-scroll",
    "fetchSpec": "latest",
    "name": "ngx-infinite-scroll",
    "raw": "ngx-infinite-scroll",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/ngx-infinite-scroll/-/ngx-infinite-scroll-6.0.1.tgz",
  "_shasum": "571e54860ce32839451569bcf6e7a63cfae327bd",
  "_spec": "ngx-infinite-scroll",
  "_where": "/Users/admin/Documents/Angular/PlayCatFront",
  "author": {
    "name": "Oren Farhi",
    "url": "orizens.com"
  },
  "bugs": {
    "url": "https://github.com/orizens/ngx-infinite-scroll/issues"
  },
  "bundleDependencies": false,
  "collective": {
    "logo": "https://opencollective.com/ngx-infinite-scroll/logo.txt",
    "type": "opencollective",
    "url": "https://opencollective.com/ngx-infinite-scroll"
  },
  "dependencies": {
    "opencollective": "^1.0.3"
  },
  "deprecated": false,
  "description": "An infinite scroll directive for Angular compatible with AoT compilation and Tree shaking",
  "devDependencies": {
    "@angular/animations": "^6.0.0",
    "@angular/common": "^6.0.0",
    "@angular/compiler": "^6.0.0",
    "@angular/compiler-cli": "^6.0.0",
    "@angular/core": "^6.0.0",
    "@angular/platform-browser": "^6.0.0",
    "@angular/platform-browser-dynamic": "^6.0.0",
    "@angular/platform-server": "^6.0.0",
    "@compodoc/compodoc": "^1.1.2",
    "@types/jasmine": "2.8.8",
    "@types/node": "7.0.10",
    "chalk": "1.1.3",
    "codelyzer": "^4.3.0",
    "core-js": "2.4.1",
    "jasmine-core": "2.5.2",
    "karma": "1.5.0",
    "karma-chrome-launcher": "2.0.0",
    "karma-jasmine": "1.1.0",
    "karma-sourcemap-loader": "0.3.7",
    "karma-spec-reporter": "0.0.30",
    "karma-webpack": "2.0.3",
    "reflect-metadata": "0.1.10",
    "rollup": "0.41.6",
    "rxjs": "^6.1.0",
    "shelljs": "0.7.7",
    "sorcery": "0.10.0",
    "ts-helpers": "1.1.2",
    "ts-loader": "2.0.3",
    "tslint": "4.5.1",
    "typescript": "2.7.2",
    "uglify-js": "^2.8.15",
    "webpack": "2.3.1",
    "yargs": "7.0.2",
    "zone.js": "^0.8.26"
  },
  "es2015": "./modules/ngx-infinite-scroll.js",
  "homepage": "https://github.com/orizens/ngx-infinite-scroll",
  "keywords": [
    "angular",
    "javascript",
    "typescript"
  ],
  "license": "MIT",
  "main": "./bundles/ngx-infinite-scroll.umd.js",
  "module": "./modules/ngx-infinite-scroll.es5.js",
  "name": "ngx-infinite-scroll",
  "optionalDependencies": {},
  "peerDependencies": {
    "@angular/common": ">= 6.0.0",
    "@angular/core": ">= 6.0.0"
  },
  "readme": "[![Build Status](https://travis-ci.org/orizens/ngx-infinite-scroll.svg?branch=master)](https://travis-ci.org/orizens/ngx-infinite-scroll) [![Backers on Open Collective](https://opencollective.com/ngx-infinite-scroll/backers/badge.svg)](#backers) [![Sponsors on Open Collective](https://opencollective.com/ngx-infinite-scroll/sponsors/badge.svg)](#sponsors)\n[![npm version](https://badge.fury.io/js/ngx-infinite-scroll.svg)](https://badge.fury.io/js/ngx-infinite-scroll)\n[![npm version](https://badge.fury.io/js/ngx-infinite-scroll.svg)](https://badge.fury.io/js/ngx-infinite-scroll)\n[![npm downloads a month](https://img.shields.io/npm/dm/ngx-infinite-scroll.svg)](https://img.shields.io/npm/dm/ngx-infinite-scroll.svg)\n[![npm downloads a week](https://img.shields.io/npm/dt/ngx-infinite-scroll.svg)](https://img.shields.io/npm/dt/ngx-infinite-scroll.svg)\n\n# Angular Infinite Scroll\n\nversions now follow Angular's version to easily reflect compatibility.\nMeaning, for **Angular 6**, use `ngx-infinite-scroll @ ^6.0.0`\n\n## Angular Support\n\nNow supports **Angular 6** and **rxjs 6** - `ngx-infinite-scroll@6.0.0`  \nFor **Angular 4** and **Angular = ^5.5.6** - use version `ngx-infinite-scroll@0.8.4`  \nFor **Angular 5.x** with **rxjs =<5.5.2** - use version `ngx-infinite-scroll@0.8.3`  \nFor Angular version **<= 2.3.1**, you can use `npm i angular2-infinite-scroll` (latest version is 0.3.42) - please notice **the angular2-infinite-scroll** package is deprecated\n\n## Angular Consulting Services\n\nI'm a Senior Javascript Engineer & A Front End Consultant at [Orizens](http://orizens.com).\nMy services include:\n\n- consulting to companies and startups on how to approach code in their projects and keep it maintainable.\n- I provide project bootstrapping and development - while afterwards, I integrate it on site and guide the team on it.\n\n[Contact Me Here](http://orizens.com/contact)\n\n## Installation\n\n```\nnpm install ngx-infinite-scroll --save\n```\n\n## Supported API\n\nCurrently supported attributes:\n\n- **infiniteScrollDistance**<_number_> - (optional, default: **2**) - the bottom percentage point of the scroll nob relatively to the infinite-scroll container (i.e, 2 (2 \\* 10 = 20%) is event is triggered when 80% (100% - 20%) has been scrolled).  \n  if container.height is 900px, when the container is scrolled to or past the 720px, it will fire the scrolled event.\n- **infiniteScrollUpDistance**<_number_> - (optional, default: **1.5**) - should get a number\n- **infiniteScrollThrottle**<_number_> - (optional, default: **150**) - should get a number of **milliseconds** for throttle. The event will be triggered this many milliseconds after the user _stops_ scrolling.\n- **infiniteScrollContainer**<_string|HTMLElement_> - (optional, default: null) - should get a html element or css selector for a scrollable element; window or current element will be used if this attribute is empty.\n- **scrolled**<_function_> - this will callback if the distance threshold has been reached on a scroll down.\n- **scrolledUp**<_function_> - (event: InfiniteScrollEvent) - this will callback if the distance threshold has been reached on a scroll up.\n- **scrollWindow**<_boolean_> - (optional, default: **true**) - listens to the window scroll instead of the actual element scroll. this allows to invoke a callback function in the scope of the element while listenning to the window scroll.\n- **immediateCheck**<_boolean_> - (optional, default: **false**) - invokes the handler immediately to check if a scroll event has been already triggred when the page has been loaded (i.e. - when you refresh a page that has been scrolled).\n- **infiniteScrollDisabled**<_boolean_> - (optional, default: **false**) - doesn't invoke the handler if set to true\n- **horizontal**<_boolean_> - (optional, default: false) - sets the scroll to listen for horizontal events\n- **alwaysCallback**<_boolean_> - (optional, default: false) - instructs the scroller to always trigger events\n- **fromRoot**<_boolean_> - (optional, default: false) - if **infiniteScrollContainer** is set, this instructs the scroller to query the container selector from the root of the **document** object.\n\n## Behavior\n\nBy default, the directive listens to the **window scroll** event and invoked the callback.  \n**To trigger the callback when the actual element is scrolled**, these settings should be configured:\n\n- [scrollWindow]=\"false\"\n- set an explict css \"height\" value to the element\n\n## DEMO\n\n[Try the Demo in StackBlitz](https://stackblitz.com/edit/ngx-infinite-scroll)\n\n## Usage\n\nFirst, import the InfiniteScrollModule to your module:\n\n```typescript\nimport { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { InfiniteScrollModule } from 'ngx-infinite-scroll';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\nimport { AppComponent } from './app';\n\n@NgModule({\n  imports: [BrowserModule, InfiniteScrollModule],\n  declarations: [AppComponent],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n\nplatformBrowserDynamic().bootstrapModule(AppModule);\n```\n\nIn this example, the **onScroll** callback will be invoked when the window is scrolled down:\n\n```typescript\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'app',\n  template: `\n\t\t<div class=\"search-results\"\n\t\t    infiniteScroll\n\t\t    [infiniteScrollDistance]=\"2\"\n\t\t    [infiniteScrollThrottle]=\"50\"\n\t\t    (scrolled)=\"onScroll()\">\n\t\t</div>\n\t`\n})\nexport class AppComponent {\n  onScroll() {\n    console.log('scrolled!!');\n  }\n}\n```\n\nin this example, whenever the \"search-results\" is scrolled, the callback will be invoked:\n\n```typescript\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'app',\n  styles: [\n    `\n      .search-results {\n        height: 20rem;\n        overflow: scroll;\n      }\n    `\n  ],\n  template: `\n\t\t<div class=\"search-results\"\n\t\t    infiniteScroll\n\t\t    [infiniteScrollDistance]=\"2\"\n\t\t    [infiniteScrollThrottle]=\"50\"\n\t\t    (scrolled)=\"onScroll()\"\n\t\t    [scrollWindow]=\"false\">\n\t\t</div>\n\t`\n})\nexport class AppComponent {\n  onScroll() {\n    console.log('scrolled!!');\n  }\n}\n```\n\nIn this example, the **onScrollDown** callback will be invoked when the window is scrolled down and the **onScrollUp** callback will be invoked when the window is scrolled up:\n\n```typescript\nimport { Component } from '@angular/core';\nimport { InfiniteScroll } from 'ngx-infinite-scroll';\n\n@Component({\n  selector: 'app',\n  directives: [InfiniteScroll],\n  template: `\n\t\t<div class=\"search-results\"\n\t\t    infiniteScroll\n\t\t    [infiniteScrollDistance]=\"2\"\n\t\t    [infiniteScrollUpDistance]=\"1.5\"\n\t\t    [infiniteScrollThrottle]=\"50\"\n\t\t    (scrolled)=\"onScrollDown()\"\n\t\t    (scrolledUp)=\"onScrollUp()\">\n\t\t</div>\n\t`\n})\nexport class AppComponent {\n  onScrollDown() {\n    console.log('scrolled down!!');\n  }\n\n  onScrollUp() {\n    console.log('scrolled up!!');\n  }\n}\n```\n\nIn this example, the **infiniteScrollContainer** attribute is used to point directive to the scrollable container using a css selector. **fromRoot** is used to determine whether the scroll container has to be searched within the whole document (`[fromRoot]=\"true\"`) or just inside the **infiniteScroll** directive (`[fromRoot]=\"false\"`, default option).\n\n```typescript\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'app',\n  styles: [\n    `\n      .main-panel {\n        height: 100px;\n        overflow-y: scroll;\n      }\n    `\n  ],\n  template: `\n\t\t<div class=\"main-panel\">\n\t\t\t<div infiniteScroll\n\t\t\t    [infiniteScrollDistance]=\"2\"\n\t\t\t    [infiniteScrollThrottle]=\"50\"\n\t\t\t    [infiniteScrollContainer]=\"selector\"\n\t\t\t    [fromRoot]=\"true\"\n\t\t\t    (scrolled)=\"onScroll()\">\n\t\t\t</div>\n\t\t</div>\n\t`\n})\nexport class AppComponent {\n  selector: string = '.main-panel';\n\n  onScroll() {\n    console.log('scrolled!!');\n  }\n}\n```\n\nIt is also possible to use **infiniteScrollContainer** without additional variable by using single quotes inside double quotes:\n\n```\n[infiniteScrollContainer]=\"'.main-panel'\"\n```\n\n# Showcase Examples\n\n- [Echoes Player - Developed with Angular, angular-cli and ngrx](http://orizens.github.io/echoes-player) ([github repo for echoes player](http://github.com/orizens/echoes-player))\n\n## Contributors\n\nThis project exists thanks to all the people who contribute. [[Contribute](CONTRIBUTING.md)].\n<a href=\"graphs/contributors\"><img src=\"https://opencollective.com/ngx-infinite-scroll/contributors.svg?width=890\" /></a>\n\n## Backers\n\nThank you to all our backers! 🙏 [[Become a backer](https://opencollective.com/ngx-infinite-scroll#backer)]\n\n<a href=\"https://opencollective.com/ngx-infinite-scroll#backers\" target=\"_blank\"><img src=\"https://opencollective.com/ngx-infinite-scroll/backers.svg?width=890\"></a>\n\n## Sponsors\n\nSupport this project by becoming a sponsor. Your logo will show up here with a link to your website. [[Become a sponsor](https://opencollective.com/ngx-infinite-scroll#sponsor)]\n\n<a href=\"https://opencollective.com/ngx-infinite-scroll/sponsor/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/ngx-infinite-scroll/sponsor/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/ngx-infinite-scroll/sponsor/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/ngx-infinite-scroll/sponsor/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/ngx-infinite-scroll/sponsor/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/ngx-infinite-scroll/sponsor/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/ngx-infinite-scroll/sponsor/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/ngx-infinite-scroll/sponsor/3/avatar.svg\"></a>\n<a href=\"https://opencollective.com/ngx-infinite-scroll/sponsor/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/ngx-infinite-scroll/sponsor/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/ngx-infinite-scroll/sponsor/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/ngx-infinite-scroll/sponsor/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/ngx-infinite-scroll/sponsor/6/website\" target=\"_blank\"><img src=\"https://opencollective.com/ngx-infinite-scroll/sponsor/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/ngx-infinite-scroll/sponsor/7/website\" target=\"_blank\"><img src=\"https://opencollective.com/ngx-infinite-scroll/sponsor/7/avatar.svg\"></a>\n<a href=\"https://opencollective.com/ngx-infinite-scroll/sponsor/8/website\" target=\"_blank\"><img src=\"https://opencollective.com/ngx-infinite-scroll/sponsor/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/ngx-infinite-scroll/sponsor/9/website\" target=\"_blank\"><img src=\"https://opencollective.com/ngx-infinite-scroll/sponsor/9/avatar.svg\"></a>\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/orizens/ngx-infinite-scroll.git"
  },
  "scripts": {
    "build": "node build.js",
    "compodoc": "compodoc -p tsconfig.json",
    "compodoc-serve": "compodoc -s",
    "pack-lib": "npm pack ./dist",
    "postinstall": "opencollective postinstall",
    "publish-lib": "npm publish ./dist",
    "publish:beta": "npm publish --tag next ./dist",
    "serve:prod": "npm run build && lite-server -c ./example/bs-config.json",
    "test": "karma start",
    "test:watch": "karma start --single-run=false",
    "transpile": "ngc -p ./tsconfig.json"
  },
  "typings": "./ngx-infinite-scroll.d.ts",
  "version": "6.0.1"
}
